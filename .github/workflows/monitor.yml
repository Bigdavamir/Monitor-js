name: Main JS Monitor Controller

on:
  # 1. Run automatically every 12 hours
  schedule:
    - cron: '0 */12 * * *'

  # 2. Allow running manually for a specific, pre-configured environment
  workflow_dispatch:
    inputs:
      target_environment:
        description: 'Select the target environment to scan manually'
        type: environment
        required: true

jobs:
  # This job handles a single scan, triggered manually from the Actions UI.
  # It allows you to select a target from a dropdown of your configured environments.
  manual_scan:
    if: github.event_name == 'workflow_dispatch'
    # This calls the reusable workflow that contains the actual scan logic.
    uses: ./.github/workflows/_reusable-scan-pipeline.yml
    with:
      # The chosen environment name is passed to the reusable workflow.
      environment_name: ${{ github.event.inputs.target_environment }}
    # All secrets (like SESSION_COOKIE) from the selected environment are passed down.
    secrets: inherit

  # For scheduled runs, this job reads the `active_targets.txt` file
  # to determine which environments should be scanned automatically.
  read_scheduled_targets:
    if: github.event_name == 'schedule'
    runs-on: ubuntu-latest
    outputs:
      # The output is a JSON array of target environment names, e.g., ["target-a", "target-b"]
      matrix: ${{ steps.read-file.outputs.json }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Read active_targets.txt and format as JSON
        id: read-file
        run: |
          if [ ! -f active_targets.txt ]; then
            echo "active_targets.txt not found. No scheduled scans will run."
            echo "json=[]" >> $GITHUB_OUTPUT
            exit 0
          fi
          # Reads the file, removes comments/empty lines, and creates a valid JSON array string
          JSON_ARRAY=$(cat active_targets.txt | grep -vE '^\s*#|^\s*$' | jq -R -s -c 'split("\n") | map(select(length > 0))')
          echo "json=${JSON_ARRAY}" >> $GITHUB_OUTPUT
          echo "Scheduled targets found: ${JSON_ARRAY}"

  # This job runs the scan pipeline in parallel for each target listed in the schedule.
  scheduled_scan_matrix:
    needs: read_scheduled_targets
    # Only run if the previous job found targets to scan.
    if: needs.read_scheduled_targets.outputs.matrix != '[]'
    strategy:
      fail-fast: false
      # Creates a parallel job for each environment name from the JSON array.
      matrix:
        target: ${{ fromJson(needs.read_scheduled_targets.outputs.matrix) }}

    # Calls the same reusable workflow for each target in the matrix.
    uses: ./.github/workflows/_reusable-scan-pipeline.yml
    with:
      environment_name: ${{ matrix.target }}
    secrets: inherit