# Reusable JS Scan Pipeline - Optimized Single-Job Workflow
name: Reusable Scan Pipeline (Single Target)

on:
  workflow_call:
    inputs:
      environment_name:
        required: true
        type: string
    secrets:
      SESSION_COOKIE:
        required: false
      DISCORD_WEBHOOK_URL:
        required: false

jobs:
  # This single job handles the entire process: scanning, processing, consolidating, committing, and notifying.
  scan-and-commit:
    name: "Scan, Consolidate & Notify (${{ inputs.environment_name }})"
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment_name }}
    steps:
      - name: Checkout Full Git History
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for git diff to compare against previous commits

      - name: Set up Go, Node & System Tools
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
      - uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install All Dependencies
        run: |
          echo "Installing system packages..."
          # Install jq for JSON processing, yara for analysis, and git.
          sudo apt-get update && sudo apt-get install -y python3-pip yara git jq

          echo "Installing Go and Node tools..."
          go install -v github.com/projectdiscovery/katana/cmd/katana@latest
          go install -v github.com/lc/gau/v2/cmd/gau@latest
          npm install -g js-beautify
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
          
          echo "Installing Python analysis tools..."
          pip install git+https://github.com/GerbenJavado/LinkFinder.git
          
          # SecretFinder requires manual cloning as it's not a standard pip package.
          git clone https://github.com/m4ll0k/SecretFinder.git /opt/secretfinder
          pip install -r /opt/secretfinder/requirements.txt
          echo "/opt/secretfinder" >> $GITHUB_PATH
          echo "✅ All dependencies installed."

      - name: Discover and Process JS Files
        env:
          SESSION_COOKIE: ${{ secrets.SESSION_COOKIE }}
        run: |
          echo "🎯 Starting scan for target: ${{ vars.TARGET_DOMAIN }}"
          echo "${{ vars.TARGET_DOMAIN }}" > target.txt

          KATANA_HEADER_ARGS=("-H" "User-Agent: Mozilla/5.0")
          if [ -n "$SESSION_COOKIE" ]; then KATANA_HEADER_ARGS+=("-H" "Cookie: $SESSION_COOKIE"); fi
          
          katana -list target.txt -jc -silent -d 5 -c 25 "${KATANA_HEADER_ARGS[@]}" -o katana-js.txt || true
          
          # Run gau and immediately filter for the exact target domain to avoid subdomain scope creep.
          cat target.txt | gau --threads 5 | grep -iE "^https?://(www\.)?${{ vars.TARGET_DOMAIN }}/" > gau-js.txt

          cat katana-js.txt gau-js.txt | sort -u > all_urls.txt
          
          # Method 1: Get URLs ending in .js (with optional query parameters)
          grep -iE '\.js($|\?)' all_urls.txt > all_js_urls.txt

          # Method 2: Probe remaining URLs to find JS files by Content-Type.
          grep -ivE '\.js($|\?)' all_urls.txt | httpx -silent -threads 25 -json -o probed.json || true
          if [ -s probed.json ]; then
            jq -r 'select(.content_type != null and (.content_type | test("javascript|x-javascript|text/javascript|application/ecmascript"))) .url' probed.json >> all_js_urls.txt
          fi

          # Final deduplication of found JS URLs
          sort -u -o all_js_urls.txt all_js_urls.txt

          JS_COUNT=$(wc -l < all_js_urls.txt)
          echo "✅ Found $JS_COUNT unique JS URLs. Proceeding to download."
          
          OUTPUT_DIR="js_files_temp"
          mkdir -p "$OUTPUT_DIR"
          
          WGET_ARGS="--user-agent=Mozilla/5.0 --quiet --no-check-certificate --tries=2 --timeout=20"
          if [ -n "$SESSION_COOKIE" ]; then WGET_ARGS="$WGET_ARGS --header=Cookie:$SESSION_COOKIE"; fi

          process_url() {
            url="$1"
            [ -z "$url" ] && return
            hashed_filename=$(echo -n "$url" | md5sum | awk '{print $1}').js
            JS_FILE_PATH="$OUTPUT_DIR/$hashed_filename"

            if wget $WGET_ARGS -O "$JS_FILE_PATH" "$url"; then
              if [ -s "$JS_FILE_PATH" ]; then
                js-beautify -r "$JS_FILE_PATH" &>/dev/null || echo "⚠️ js-beautify failed on $JS_FILE_PATH"
                echo "$hashed_filename,$url" >> "$OUTPUT_DIR/index.txt"
              else
                rm -f "$JS_FILE_PATH"
              fi
            fi
          }
          export -f process_url; export WGET_ARGS; export OUTPUT_DIR
          cat all_js_urls.txt | xargs -P 25 --no-run-if-empty -I {} bash -c 'process_url "$@"' _ {}

      - name: Consolidate JS Files and Index
        run: |
          TARGET_DIR="js_files/${{ vars.TARGET_DOMAIN }}"
          TEMP_DIR="js_files_temp"
          mkdir -p "$TARGET_DIR"

          echo "Consolidating downloaded files..."
          # If no files were downloaded, there's nothing to do.
          if [ ! -d "$TEMP_DIR" ] || [ -z "$(ls -A $TEMP_DIR)" ]; then
            echo "No new files were downloaded. Nothing to consolidate."
            exit 0
          fi
          
          # Copy new JS files, but do not overwrite existing ones.
          find "$TEMP_DIR" -type f -name "*.js" -exec cp -n {} "$TARGET_DIR/" \;

          # Smartly merge the new index with the existing master index, then sort and unique the result.
          if [ -f "$TEMP_DIR/index.txt" ]; then
            cat "$TEMP_DIR/index.txt" "$TARGET_DIR/index.txt" 2>/dev/null | sort -u > "$TARGET_DIR/index.final"
            mv "$TARGET_DIR/index.final" "$TARGET_DIR/index.txt"
            echo "✅ Index file updated."
          fi
          
          rm -rf "$TEMP_DIR"
          echo "✅ Consolidation complete."

      - name: Detect and Commit Changes
        id: git_commit
        run: |
          TARGET_DIR="js_files/${{ vars.TARGET_DOMAIN }}"
          git config --global user.name "GitHub Action Bot"
          git config --global user.email "action-bot@github.com"

          git add -A "$TARGET_DIR/"

          # Exit if there are no staged changes to commit.
          if git diff --staged --quiet; then
            echo "✅ No changes detected in the repository. Workflow finished successfully."
            echo "changes_detected=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "💾 Changes detected. Committing to the repository."
          git commit -m "[JS Scan] Update files for ${{ vars.TARGET_DOMAIN }}"
          
          echo "🔄 Syncing with remote repository..."
          git pull origin main --rebase
          
          echo "⬆️ Pushing changes..."
          git push origin main
          
          echo "changes_detected=true" >> $GITHUB_OUTPUT
          
          # Capture the list of changed files for the analysis step.
          CHANGED_FILES=$(git diff --name-only HEAD^ HEAD -- "$TARGET_DIR/")
          echo "changed_files<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGED_FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Analyze Changes and Send Notification
        if: steps.git_commit.outputs.changes_detected == 'true'
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          TARGET_DOMAIN: ${{ vars.TARGET_DOMAIN }}
        run: |
          # The list of changed files comes from the previous step's output.
          CHANGED_FILES="${{ steps.git_commit.outputs.changed_files }}"
          
          # Filter for only .js files to analyze.
          CHANGED_JS_FILES=$(echo "$CHANGED_FILES" | grep '\.js$' || true)
          
          if [ -n "$CHANGED_JS_FILES" ]; then
            echo "🔬 Analyzing changed JS files..."
            chmod +x analyze_js.sh
            # Pipe the list of changed JS files directly to the analysis script.
            echo "$CHANGED_JS_FILES" | ./analyze_js.sh
          else
            echo "✅ No changed JS files to analyze, only other file types (e.g., index.txt) were updated."
          fi

          echo "🚀 Sending notification..."
          chmod +x send_notification.sh
          ./send_notification.sh
